name: version-command

on:
  repository_dispatch:
    types: [version-bump]

permissions:
  contents: write

jobs:
  bump-version:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout PR head branch (use PAT so push re-triggers CI)
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.client_payload.target }}
          fetch-depth: 0
          token: ${{ secrets.RELEASE_PAT }}

      - uses: actions/setup-node@v4
        with:
          node-version: 22

      - uses: pnpm/action-setup@v4
        with:
          version: 10

      - run: pnpm install --frozen-lockfile

      - name: Apply npm version bump (no tag)
        run: |
          npm version ${{ github.event.client_payload.bump }} --no-git-tag-version -m "chore(version): %s"

      - name: Commit & push chore(version)
        run: |
          set -e
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add package.json || true

          NEW_VERSION=$(node -p "require('./package.json').version")
          git commit -m "chore(version): v${NEW_VERSION}" || echo "No changes to commit"
          git push origin HEAD || echo "Nothing to push"

      - name: Read bumped version
        id: version_post
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Version result (update PR comment)
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.RELEASE_PAT }}
          script: |
            const owner    = context.repo.owner;
            const repo     = context.repo.repo;

            const prNumber = context.payload.client_payload?.pr_number;
            if (!prNumber) {
              core.setFailed('Missing pr_number in repository_dispatch.client_payload');
              return;
            }

            const MARKER  = '<!-- pr-version-marker -->';
            const version = '${{ steps.version_post.outputs.version }}';
            const tag     = `v${version}`;

            const ackId = context.payload.client_payload?.ack_comment_id;

            const body = `${MARKER}
            âœ… **Version:** \`${tag}\`
            _Requested by_ @${context.actor}`;

            if (ackId) {
              await github.rest.issues.updateComment({
                owner, repo, comment_id: ackId, body
              });
            } else {
              const { data: comments } = await github.rest.issues.listComments({
                owner, repo, issue_number: prNumber, per_page: 100
              });
              const existing = comments.find(
                c => c.user?.type === 'Bot' && (c.body || '').includes(MARKER)
              );
              if (existing) {
                await github.rest.issues.updateComment({
                  owner, repo, comment_id: existing.id, body
                });
              } else {
                await github.rest.issues.createComment({
                  owner, repo, issue_number: prNumber, body
                });
              }
            }

            const originalCommentId = context.payload.client_payload?.comment_id;
            if (originalCommentId) {
              await github.rest.reactions.createForIssueComment({
                owner, repo,
                comment_id: originalCommentId,
                content: 'hooray'
              });
            }
