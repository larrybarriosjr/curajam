name: CI

on:
  pull_request:
    types: [closed]
    branches:
      - main

permissions: read-all

jobs:
  test:
    if: ${{ github.event.pull_request.merged == true }}
    name: 1 - Test & Build
    timeout-minutes: 20
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: 10
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "pnpm"
      - run: pnpm install --frozen-lockfile
      - run: pnpm lint
      - run: pnpm tsc --noEmit
      - run: pnpm coverage
      - run: pnpm build
      - uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./__local__/coverage
          destination_dir: reports/stable/coverage
      - uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./__local__/bundle
          destination_dir: reports/stable/bundle

  comment:
    name: 2 - Report Links Comment
    timeout-minutes: 1
    runs-on: ubuntu-latest
    needs: test
    permissions:
      issues: write
      pull-requests: write
    steps:
      - uses: actions/github-script@v7
        with:
          script: |
            const baseUrl = `https://${context.repo.owner}.github.io/${context.repo.repo}/reports/stable`
            const coverageUrl = `${baseUrl}/coverage/index.html`
            const bundleUrl = `${baseUrl}/bundle/sonda_0.html`

            const body = `
            📝 **Reports for commit \`latest-stable\`**

            - [Coverage Report](${coverageUrl})
            - [Bundle Analysis](${bundleUrl})
            `

            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })

            const existing = comments.find(c => c.user.type === "Bot" && c.body.includes("Reports for commit"))
            if (existing) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existing.id,
                body
              })
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body
              })
            }

  release:
    name: 3 - Release
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: write
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: 22
      - id: version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create release branch
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git checkout -b release/v${{ steps.version.outputs.version }}
          git push origin release/v${{ steps.version.outputs.version }}

      - name: Create tag
        run: |
          git tag v${{ steps.version.outputs.version }}
          git push origin v${{ steps.version.outputs.version }}

  success:
    name: 4 - Success
    runs-on: ubuntu-latest
    needs: [comment, release]
    permissions:
      issues: write
      pull-requests: write
    steps:
      - uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const prNumber = context.issue.number;

            const version = '${{ needs.release.outputs.version }}';
            const tag = `v${version}`;
            const releaseBranch = `release/v${version}`;

            const baseUrl = `https://${owner}.github.io/${repo}/reports/stable`;
            const coverageUrl = `${baseUrl}/coverage/index.html`;
            const bundleUrl = `${baseUrl}/bundle/sonda_0.html`;

            // GitHub links
            const branchUrl = `https://github.com/${owner}/${repo}/tree/${releaseBranch}`;
            const tagUrl = `https://github.com/${owner}/${repo}/tree/${tag}`;
            const commitSha = context.payload.pull_request?.merge_commit_sha ?? context.sha;
            const commitUrl = `https://github.com/${owner}/${repo}/commit/${commitSha}`;

            // Shields-style badges
            const badge = (label, message, color) =>
              `![Static Badge](https://img.shields.io/badge/${label}-${message}-${color}?style=for-the-badge)`;

            const badges = [
             `[${badge('release', tag, '34D058')}`,
              `[${badge('branch', releaseBranch, '1E90F')}`,
              `[${badge('commit', commitSha.slice(0,7),'6f42c1')}`,
             `[${badge('status', 'success', '2ea043')}`
            ].join(' ');

            const timestamp = new Date().toLocaleString('en-US', { timeZone: 'UTC', hour12: false }) + ' UTC';

            // Flashy content with a persistent marker (so we can update)
            const MARKER = '<!-- release-comment-marker -->';
            const body = `
            ${MARKER}
            ## 🚀 **Release \`${tag}\` is live!**  🎉
            ${badges}

            > This pull request was merged and promoted to **\`${releaseBranch}\`** with tag **\`${tag}\`**.

            **Quick links**
            - 📦 **Release branch:** \`${releaseBranch}\`
            - 🏷️ **Tag:** \`${tag}\`
            - 🧪 **Coverage report:** [Open](${coverageUrl})
            - 📊 **Bundle analysis:** [Open](${bundleUrl})
            - 🔗 **Merge commit:** \`${commitSha.slice(0,7)}\`

            <details>
            <summary>ℹ️ Details</summary>

            - Triggered by: @\${context.actor}
            - Workflow: \`${context.workflow}\`
            - Run: [${context.runNumber}](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}   _If you re-run the workflow, this comment will update automatically._ ✨
            `;

            // Find existing marker comment
            const { data: comments } = await github.rest.issues.listComments({
              owner, repo, issue_number: prNumber, per_page: 100
            });

            const existing = comments.find(c =>
              c.user?.type === 'Bot' &&
              typeof c.body === 'string' &&
              c.body.includes(MARKER)
            );

            if (existing) {
              await github.rest.issues.updateComment({
                owner, repo, comment_id: existing.id, body
              });
            } else {
              await github.rest.issues.createComment({
                owner, repo, issue_number: prNumber, body
              });
            }
